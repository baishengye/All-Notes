// Generated by view binder compiler. Do not edit!
package com.bo.app4_retrofit.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.bo.app4_retrofit.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRetrofitBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button btGetPath;

  @NonNull
  public final Button btGetQuery;

  @NonNull
  public final Button btGetQueryMap;

  @NonNull
  public final Button btPostBody;

  @NonNull
  public final Button btPostField;

  @NonNull
  public final Button btPostUploadOne;

  private ActivityRetrofitBinding(@NonNull RelativeLayout rootView, @NonNull Button btGetPath,
      @NonNull Button btGetQuery, @NonNull Button btGetQueryMap, @NonNull Button btPostBody,
      @NonNull Button btPostField, @NonNull Button btPostUploadOne) {
    this.rootView = rootView;
    this.btGetPath = btGetPath;
    this.btGetQuery = btGetQuery;
    this.btGetQueryMap = btGetQueryMap;
    this.btPostBody = btPostBody;
    this.btPostField = btPostField;
    this.btPostUploadOne = btPostUploadOne;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRetrofitBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRetrofitBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_retrofit, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRetrofitBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bt_get_path;
      Button btGetPath = rootView.findViewById(id);
      if (btGetPath == null) {
        break missingId;
      }

      id = R.id.bt_get_query;
      Button btGetQuery = rootView.findViewById(id);
      if (btGetQuery == null) {
        break missingId;
      }

      id = R.id.bt_get_queryMap;
      Button btGetQueryMap = rootView.findViewById(id);
      if (btGetQueryMap == null) {
        break missingId;
      }

      id = R.id.bt_post_body;
      Button btPostBody = rootView.findViewById(id);
      if (btPostBody == null) {
        break missingId;
      }

      id = R.id.bt_post_field;
      Button btPostField = rootView.findViewById(id);
      if (btPostField == null) {
        break missingId;
      }

      id = R.id.bt_post_upload_one;
      Button btPostUploadOne = rootView.findViewById(id);
      if (btPostUploadOne == null) {
        break missingId;
      }

      return new ActivityRetrofitBinding((RelativeLayout) rootView, btGetPath, btGetQuery,
          btGetQueryMap, btPostBody, btPostField, btPostUploadOne);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
