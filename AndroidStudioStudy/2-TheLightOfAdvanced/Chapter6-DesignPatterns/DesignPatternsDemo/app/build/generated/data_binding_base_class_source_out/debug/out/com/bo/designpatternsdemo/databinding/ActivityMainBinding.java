// Generated by view binder compiler. Do not edit!
package com.bo.designpatternsdemo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.bo.designpatternsdemo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button btBuilder;

  @NonNull
  public final Button btDecorator;

  @NonNull
  public final Button btFacade;

  @NonNull
  public final Button btFactoryMethod;

  @NonNull
  public final Button btFlyweight;

  @NonNull
  public final Button btProxy;

  @NonNull
  public final Button btSimpleFactory;

  @NonNull
  public final Button btStrategy;

  private ActivityMainBinding(@NonNull RelativeLayout rootView, @NonNull Button btBuilder,
      @NonNull Button btDecorator, @NonNull Button btFacade, @NonNull Button btFactoryMethod,
      @NonNull Button btFlyweight, @NonNull Button btProxy, @NonNull Button btSimpleFactory,
      @NonNull Button btStrategy) {
    this.rootView = rootView;
    this.btBuilder = btBuilder;
    this.btDecorator = btDecorator;
    this.btFacade = btFacade;
    this.btFactoryMethod = btFactoryMethod;
    this.btFlyweight = btFlyweight;
    this.btProxy = btProxy;
    this.btSimpleFactory = btSimpleFactory;
    this.btStrategy = btStrategy;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bt_builder;
      Button btBuilder = rootView.findViewById(id);
      if (btBuilder == null) {
        break missingId;
      }

      id = R.id.bt_decorator;
      Button btDecorator = rootView.findViewById(id);
      if (btDecorator == null) {
        break missingId;
      }

      id = R.id.bt_facade;
      Button btFacade = rootView.findViewById(id);
      if (btFacade == null) {
        break missingId;
      }

      id = R.id.bt_factory_method;
      Button btFactoryMethod = rootView.findViewById(id);
      if (btFactoryMethod == null) {
        break missingId;
      }

      id = R.id.bt_flyweight;
      Button btFlyweight = rootView.findViewById(id);
      if (btFlyweight == null) {
        break missingId;
      }

      id = R.id.bt_proxy;
      Button btProxy = rootView.findViewById(id);
      if (btProxy == null) {
        break missingId;
      }

      id = R.id.bt_simple_factory;
      Button btSimpleFactory = rootView.findViewById(id);
      if (btSimpleFactory == null) {
        break missingId;
      }

      id = R.id.bt_strategy;
      Button btStrategy = rootView.findViewById(id);
      if (btStrategy == null) {
        break missingId;
      }

      return new ActivityMainBinding((RelativeLayout) rootView, btBuilder, btDecorator, btFacade,
          btFactoryMethod, btFlyweight, btProxy, btSimpleFactory, btStrategy);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
